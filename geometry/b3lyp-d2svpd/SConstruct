# www.scons.org script files for geometry optimization using GAMESS
#
# Use "nohup" to run from ssh and keep running after logout

import psutil
import time
import sys
import os
import shutil
import re


def checkIfGamessRunning(processName):
	'''
	Check if there is any running process that contains the given name processName.
	'''
	#Iterate over the all the running process
	for proc in psutil.process_iter():
		try:
			# Check if process name contains the given name string.
			if processName.lower() in proc.name().lower():
				return True
		except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
			pass
	return False;

if checkIfGamessRunning('gamess.00.x'):
	print('GAMESS is already running on this machine, exiting...')
	sys.exit()

env = Environment()

env['ENV']['USER'] = os.environ['USER']
env['ENV']['HOME'] = os.environ['HOME']

# GAMESS keys file stuff, keys files generated from the base-keys.gamess file
keys_base = 'base-keys.gamess'
keys_gas = 'keys_gas.gamess'
keys_gas_linear = 'keys_gas_linear.gamess'
keys_gas_p1 = 'keys_gas_p1.gamess'
keys_gas_m1 = 'keys_gas_m1.gamess'
keys_gas_m2 = 'keys_gas_m2.gamess'
# creating the charge files
file = open(keys_base,'r')
baseContents = file.read()
file.close()

# Base configuration plus optimization
optimizeKeys = '\n! Optimize the geometry\n $statpt opttol=0.0005 nstep=50 $end\n $contrl runtyp=OPTIMIZE maxit=200 $end\n'
internalCoord = '\n! Internal Coordinates, for faster convergence\n! See http://molecularmodelingbasics.blogspot.com/2009/07/\n! some-gamess-input-basics_24.html\n $CONTRL nzvar=1 $END\n $zmat dlc=.t. auto=.t. $END\n'

# General file, gas phase optimization
file = open(keys_gas,'w')
file.write(baseContents + optimizeKeys + internalCoord)
file.close()

# The file for linear molecules, with optimization
file = open(keys_gas_linear,'w')
file.write(baseContents + optimizeKeys)
file.close()

# File for cations
file = open(keys_gas_p1,'w')
file.write(baseContents + optimizeKeys + '\n $CONTRL ICHARG=+1 $END')
file.close()

# File for anions
file = open(keys_gas_m1,'w')
file.write(baseContents + optimizeKeys + '\n $CONTRL ICHARG=-1 $END')
file.close()
file = open(keys_gas_m2,'w')
file.write(baseContents + optimizeKeys + '\n $CONTRL ICHARG=-2 $END')
file.close()

# Gamess stuff
babelGasMolToInp = Builder(action = 'obabel -i mol \'$SOURCE\' -o gamin -xf ' + keys_gas + ' -O \'$TARGET\'; [ ! -f \'${SOURCE.base}.keys\' ] || cat \'${SOURCE.base}.keys\' >> \'$TARGET\'', suffix = '.inp', single_source=True)
babelGasMolToInp_linear = Builder(action = 'obabel -i mol $SOURCE -o gamin -xf ' + keys_gas_linear + ' -O $TARGET', suffix = '.inp', single_source=True)
babelGasMolToInp_p1 = Builder(action = 'obabel -i mol $SOURCE -o gamin -xf ' + keys_gas_p1 + ' -O $TARGET', suffix = '.inp', single_source=True)
babelGasMolToInp_m1 = Builder(action = 'obabel -i mol $SOURCE -o gamin -xf ' + keys_gas_m1 + ' -O $TARGET', suffix = '.inp', single_source=True)
babelGasMolToInp_m2 = Builder(action = 'obabel -i mol $SOURCE -o gamin -xf ' + keys_gas_m2 + ' -O $TARGET', suffix = '.inp', single_source=True)
babelGamessToXYZ = Builder(action = 'obabel -i gamout $SOURCE -o xyz -O $TARGET', suffix = '.xyz', single_source=True)

# Gamess also produces a .dat file
def gamess_targets(target, source, env):
		   target.append('$HOME/src/gamess/$TARGET.dat')
		   return target, source

gamessGas = Builder(action = os.environ['HOME'] + '/src/gamess/rungms $SOURCE > $TARGET', suffix = '.gamout',
		single_source=True) # , emitter = gamess_targets)

env.Append(BUILDERS = {'BabelGasMolToInp' : babelGasMolToInp})
env.Append(BUILDERS = {'BabelGasMolToInp_linear' : babelGasMolToInp_linear})
env.Append(BUILDERS = {'BabelGasMolToInp_p1' : babelGasMolToInp_p1})
env.Append(BUILDERS = {'BabelGasMolToInp_m1' : babelGasMolToInp_m1})
env.Append(BUILDERS = {'BabelGasMolToInp_m2' : babelGasMolToInp_m2})
env.Append(BUILDERS = {'BabelGamessToXYZ' : babelGamessToXYZ})
env.Append(BUILDERS = {'GamessGas' : gamessGas})


# If in dist mode, copy all mol files to this folder and build all
dist = ARGUMENTS.get('dist', 0)
if dist == 'true':
	#molsrc = Glob('../mol/tmp/*.mol')
	molsrc = Glob('../../mol/std/*.mol')
	molsrc+= Glob('../../mol/ions/*.mol')
	env.Execute(Install('.', molsrc))

	# Linear molecules we use the moll extension, since it requires a different builder
	mollinear = Glob('../../mol/linear/*.mol')
	for fi in mollinear:
		Command(os.path.split(fi.rstr())[1] + "l", [], Copy("$TARGET", fi))


# If we should run the gas optimization to build the xyz files
molfiles = Glob('*.mol*')
files = []
files_linear = []
files_p1 = []
files_m1 = []
files_m2 = []
for fi in molfiles :
	outfile = os.path.splitext(fi.rstr())[0] + '.xyz'
	if os.path.exists(outfile) :
		print('skipping ' + outfile)
		continue
	if str(fi).endswith("+1.mol") :
		files_p1.append(fi)
	elif str(fi).endswith("-1.mol") :
		files_m1.append(fi)
	elif str(fi).endswith("-2.mol") :
		files_m2.append(fi)
	elif str(fi).endswith(".moll") :
		files_linear.append(fi)
	elif str(fi).endswith(".mol") :
		files.append(fi)
	
# Convert mol files to gamess input
inpFiles = env.BabelGasMolToInp(files)
inpFiles += env.BabelGasMolToInp_linear(files_linear)
inpFiles += env.BabelGasMolToInp_p1(files_p1)
inpFiles += env.BabelGasMolToInp_m1(files_m1)
inpFiles += env.BabelGasMolToInp_m2(files_m2)
gamoutFiles = env.GamessGas(inpFiles)
xyzFiles = env.BabelGamessToXYZ(gamoutFiles)
env.Depends(inpFiles, ['base-keys.gamess'])
	
env.Default(xyzFiles)

# Build all files for Gamess
# Delete all DAT files, otherwise gamess will stop
delAction = Delete(Glob(os.environ['HOME'] + '/src/gamess/scr/*.dat') + Glob('/tmp/*.dat'))
Execute(delAction)


