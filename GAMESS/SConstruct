# www.scons.org script files for COSMO computations using GAMESS
#
# Use "nohup" to run from ssh and keep running after logout

import psutil
import time
import sys
import os
import shutil
import re


def checkIfGamessRunning(processName):
	'''
	Check if there is any running process that contains the given name processName.
	'''
	#Iterate over the all the running process
	for proc in psutil.process_iter():
		try:
			# Check if process name contains the given name string.
			if processName.lower() in proc.name().lower():
				return True
		except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
			pass
	return False;

if checkIfGamessRunning('gamess.00.x'):
	print('GAMESS is already running on this machine, exiting...')
	# sys.exit()

env = Environment()

env['ENV']['USER'] = os.environ['USER']
env['ENV']['HOME'] = os.environ['HOME']

# GAMESS keys file stuff, keys files generated from the base-keys.gamess file
keys_base = 'base-keys.gamess'
keys_gas = 'keys_gas.gamess'
keys_gas_linear = 'keys_gas_linear.gamess'
keys_gas_p1 = 'keys_gas_p1.gamess'
keys_gas_m1 = 'keys_gas_m1.gamess'
keys_cosmo = 'keys_cosmo.gamess'
keys_cosmo_p1 = 'keys_cosmo_p1.gamess'
keys_cosmo_m1 = 'keys_cosmo_m1.gamess'
# creating the charge files
file = open(keys_base,'r')
baseContents = file.read()
file.close()

# Base configuration plus optimization
optimizeKeys = '\n! Optimize the geometry\n $statpt opttol=0.0005 nstep=50 $end\n $contrl runtyp=OPTIMIZE maxit=200 $end\n'
internalCoord = '\n! Internal Coordinates, for faster convergence\n! See http://molecularmodelingbasics.blogspot.com/2009/07/\n! some-gamess-input-basics_24.html\n $CONTRL nzvar=1 $END\n $zmat dlc=.t. auto=.t. $END\n'
cosmoKeys = '\n! Run COSMO on perfect conductor\n $COSGMS PRFCND=.TRUE. $end\n! Specifying RSOLV\n $COSGMS COSRAD = 1.4 $end\n'

# General file, gas phase optimization
file = open(keys_gas,'w')
file.write(baseContents + optimizeKeys + internalCoord)
file.close()

# The file for linear molecules, with optimization
file = open(keys_gas_linear,'w')
file.write(baseContents + optimizeKeys)
file.close()

# The file for linear molecules, with optimization
file = open(keys_cosmo,'w')
file.write(baseContents + cosmoKeys)
file.close()

# File for cations
file = open(keys_gas_p1,'w')
file.write(baseContents + optimizeKeys + '\n $CONTRL ICHARG=+1 $END')
file.close()
file = open(keys_cosmo_p1,'w')
file.write(baseContents + cosmoKeys + '\n $CONTRL ICHARG=+1 $END')
file.close()

# File for anions
file = open(keys_gas_m1,'w')
file.write(baseContents + optimizeKeys + '\n $CONTRL ICHARG=-1 $END')
file.close()
file = open(keys_cosmo_m1,'w')
file.write(baseContents + cosmoKeys + '\n $CONTRL ICHARG=-1 $END')
file.close()

# Gamess stuff
babelGasMolToInp = Builder(action = 'obabel -i mol $SOURCE -o gamin -xf ' + keys_gas + ' -O $TARGET', suffix = '.inp', single_source=True)
babelGasMolToInp_linear = Builder(action = 'obabel -i mol $SOURCE -o gamin -xf ' + keys_gas_linear + ' -O $TARGET', suffix = '.inp', single_source=True)
babelGasMolToInp_p1 = Builder(action = 'obabel -i mol $SOURCE -o gamin -xf ' + keys_gas_p1 + ' -O $TARGET', suffix = '.inp', single_source=True)
babelGasMolToInp_m1 = Builder(action = 'obabel -i mol $SOURCE -o gamin -xf ' + keys_gas_m1 + ' -O $TARGET', suffix = '.inp', single_source=True)
babelGamessToXYZ = Builder(action = 'obabel -i gamout $SOURCE -o xyz -O $TARGET', suffix = '.xyz', single_source=True)
babelXYZToInpCosmo = Builder(action = 'obabel -i xyz $SOURCE -o gamin -xf ' + keys_cosmo + ' -O $TARGET', suffix = '.inp', single_source=True)
babelXYZToInpCosmo_p1 = Builder(action = 'obabel -i xyz $SOURCE -o gamin -xf ' + keys_cosmo_p1 + ' -O $TARGET', suffix = '.inp', single_source=True)
babelXYZToInpCosmo_m1 = Builder(action = 'obabel -i xyz $SOURCE -o gamin -xf ' + keys_cosmo_m1 + ' -O $TARGET', suffix = '.inp', single_source=True)

# Gamess also produces a .dat file
def gamess_targets(target, source, env):
		   target.append('$HOME/src/gamess/$TARGET.dat')
		   return target, source

gamessGas = Builder(action = os.environ['HOME'] + '/src/gamess/rungms $SOURCE > $TARGET', suffix = '.gamout',
		single_source=True) # , emitter = gamess_targets)

gamessCosmo = Builder(action = os.environ['HOME'] + '/src/gamess/rungms $SOURCE > $TARGET', suffix = '.gout',
		single_source=True) # , emitter = gamess_targets)

env.Append(BUILDERS = {'BabelGasMolToInp' : babelGasMolToInp})
env.Append(BUILDERS = {'BabelGasMolToInp_linear' : babelGasMolToInp_linear})
env.Append(BUILDERS = {'BabelGasMolToInp_p1' : babelGasMolToInp_p1})
env.Append(BUILDERS = {'BabelGasMolToInp_m1' : babelGasMolToInp_m1})
env.Append(BUILDERS = {'BabelGamessToXYZ' : babelGamessToXYZ})
env.Append(BUILDERS = {'BabelXYZToInpCosmo' : babelXYZToInpCosmo})
env.Append(BUILDERS = {'BabelXYZToInpCosmo_p1' : babelXYZToInpCosmo_p1})
env.Append(BUILDERS = {'BabelXYZToInpCosmo_m1' : babelXYZToInpCosmo_m1})
env.Append(BUILDERS = {'GamessGas' : gamessGas})
env.Append(BUILDERS = {'GamessCosmo' : gamessCosmo})


# If in dist mode, copy all mol files to this folder and build all
dist = ARGUMENTS.get('dist', 0)
if dist == 'true':
	#molsrc = Glob('../mol/tmp/*.mol')
	molsrc = Glob('../mol/std/*.mol')
	molsrc+= Glob('../mol/ions/*.mol')
	env.Execute(Install('.', molsrc))

	# Linear molecules we use the moll extension, since it requires a different builder
	mollinear = Glob('../mol/linear/*.mol')
	for fi in mollinear:
		Command(os.path.split(fi.rstr())[1] + "l", [], Copy("$TARGET", fi))


# If we should run the gas optimization to build the xyz files
if ARGUMENTS.get('gas', 0) == 'true':
	molfiles = Glob('*.mol*')
	files = []
	files_linear = []
	files_p1 = []
	files_m1 = []
	for fi in molfiles :
		outfile = os.path.splitext(fi.rstr())[0] + '.gamout'
		if os.path.exists(outfile) :
			print('skipping ' + outfile)
			continue
		if str(fi).endswith("+1.mol") :
			files_p1.append(fi)
		elif str(fi).endswith("-1.mol") :
			files_m1.append(fi)
		elif str(fi).endswith(".moll") :
			files_linear.append(fi)
		else :
			files.append(fi)
	
	# Convert mol files to gamess input
	inpFiles = env.BabelGasMolToInp(files)
	inpFiles += env.BabelGasMolToInp_linear(files_linear)
	inpFiles += env.BabelGasMolToInp_p1(files_p1)
	inpFiles += env.BabelGasMolToInp_m1(files_m1)
	gamoutFiles = env.GamessGas(inpFiles)
	xyzFiles = env.BabelGamessToXYZ(gamoutFiles)
	env.Depends(inpFiles, ['base-keys.gamess'])
	
	env.Default(xyzFiles)

else :
	xyzfiles = Glob('*.xyz*')
	files = []
	files_linear = []
	files_big = []
	files_p1 = []
	files_m1 = []
	for fi in xyzfiles :
		goutfile = os.path.splitext(fi.rstr())[0] + '.gout'
		if os.path.exists(goutfile) :
			print('skipping ' + goutfile)
			continue
		if str(fi).endswith("+1.xyz") :
			files_p1.append(fi)
		elif str(fi).endswith("-1.xyz") :
			files_m1.append(fi)
		else :
			files.append(fi)

	# Convert xyz files to gamess input
	inpCosmoFiles = env.BabelXYZToInpCosmo(files)
	inpCosmoFiles+= env.BabelXYZToInpCosmo_p1(files_p1)
	inpCosmoFiles+= env.BabelXYZToInpCosmo_m1(files_m1)
	goutFiles = env.GamessCosmo(inpCosmoFiles)
	env.Depends(inpCosmoFiles, ['base-keys.gamess'])

	env.Default(goutFiles)

# Build all files for Gamess
# Delete all DAT files, otherwise gamess will stop
delAction = Delete(Glob(os.environ['HOME'] + '/src/gamess/scr/*.dat') + Glob('/tmp/*.dat'))
Execute(delAction)

	
# env.Depends(inps, delAction)
# process files with gamess
#gamessBuild = env.Gamess(inps)
#goutBuild = env.Gout(gamessBuild)
#env.Alias('gamess', goutBuild)

basedir = os.path.basename(os.path.abspath('.'))

if dist == 'true':
	molfiles = Glob('*.gout')
	# Zip all .gout by default if in 'dist' mode
	zipAction = env.Zip('../HF_TZVP.zip', molfiles)
	env.Default(zipAction)
#else:
#	env.Default(goutBuild)

